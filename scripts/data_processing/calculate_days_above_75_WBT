#Counts the number of days per year above 75 degrees Wet-Bulb Temp threshold
import os
import numpy as np
import netCDF4 as nc
from datetime import datetime, timedelta
import pandas as pd 

THRESHOLD_C = 23.8889 #75 degrees f in C
START_DATE = datetime(1993, 1, 1) #Start of the 30 year period
END_DATE = datetime(2023, 1, 1) #End of the 30 year period
FILL_VALUES = -1e+30, -2e+30, -99.0  #Fill values for missing data
DATA_COMPLETENESS_THRESHOLD = 0.9 #Ensure at least 90% of data is available

source_dir = '/path/to/your/HadISD/files'

def hours_to_datetime(hours, base_date): 
    return base_date + np.array([timedelta(hours=h) for h in hours])

def calculate_relative_humidity(temperature, dew_point):
    return 100 * (np.exp((17.625 * dew_point) / (243.04 + dew_point)) / np.exp((17.625 * temperature) / (243.04 + temperature)))

def calculate_wet_bulb(temperature, relative_humidity): 
    Tw = (temperature * np.arctan(0.151977 * np.sqrt(relative_humidity + 8.313659)) + 
          np.arctan(temperature + relative_humidity) - 
          np.arctan(relative_humidity - 1.676331) + 
          0.00391838 * relative_humidity**(3/2) * np.arctan(0.023101 * relative_humidity) - 
          4.686035)
    
    return Tw

def process_file(nc_file):
    try:
        with nc.Dataset(nc_file, 'r') as dataset:
            time_var = dataset.variables['time'][:]
            base_date = datetime(1931, 1, 1)
            time_values = hours_to_datetime(time_var, base_date)

            mask = (START_DATE <= time_values) & (time_values < END_DATE)
            if not np.any(mask):
                return None

            time_values = time_values[mask]
            dew_point_values = dataset.variables['dewpoints'][:][mask]
            temp_values = dataset.variables['temperatures'][:][mask]
            
            lon = dataset.variables['longitude'][:][0]
            lat = dataset.variables['latitude'][:][0]

            for FILL_VALUE in FILL_VALUES:
                dew_point_values = np.where(dew_point_values == FILL_VALUE, np.nan, dew_point_values)
                temp_values = np.where(temp_values == FILL_VALUE, np.nan, temp_values)
            
            relative_humidity = calculate_relative_humidity(temp_values, dew_point_values)
            wet_bulb_values = calculate_wet_bulb(temp_values, relative_humidity)

            df = pd.DataFrame({'time': pd.to_datetime(time_values), 'wet_bulb': wet_bulb_values})
            df.set_index('time', inplace=True) 
            daily_max_wet_bulb = df.resample('D').max()

            expected_days = (END_DATE - START_DATE).days
            valid_days = daily_max_wet_bulb['wet_bulb'].count()
            completeness = valid_days / expected_days

            if completeness < DATA_COMPLETENESS_THRESHOLD:
                return None

            #Calculate average days per year above the threshold
            days_above_threshold = (daily_max_wet_bulb['wet_bulb'] > THRESHOLD_C).sum()
            num_years = (END_DATE - START_DATE).days / 365.25
            avg_days_per_year = days_above_threshold / num_years


            return avg_days_per_year, lon, lat
    except Exception as e:
        print(f"Error processing {nc_file}: {e}")
        return None

stations = []
values = []


for root, dirs, files in os.walk(source_dir):
    for filename in files:
        if filename.endswith('.nc'):
            file_path = os.path.join(root, filename)
            result = process_file(file_path)
            if result:
                avg_days, lon, lat = result
                if avg_days >= 0:
                    stations.append((lon, lat))
                    values.append(avg_days)

#Create a DataFrame
df = pd.DataFrame(stations, columns=['longitude', 'latitude'])
df['avg_days_per_year'] = values

#Save lat, lon, and days above 75 to an output file
output_file = '/path/to/your/output/WBT/file'
df.to_csv(output_file, index=False)
print(f"Data saved to {output_file}")
